@page "/"
@using System.Text
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorChat.Shared
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4">
    <MudStack Spacing="2">
        <MudStack Row>
            <MudText Typo="Typo.h4" Class="mr-auto">Chat</MudText>
            @switch (hub?.State)
            {
                case HubConnectionState.Connected:
                    <MudChip T="string" Color="Color.Success" Size="Size.Small" OnClick="Disconnect">Connected</MudChip>
                    break;
                case HubConnectionState.Disconnected:
                    <MudChip T="string" Color="Color.Error" Size="Size.Small" OnClick="Connect">Disconnected</MudChip>
                    break;
                case HubConnectionState.Connecting or HubConnectionState.Reconnecting:
                    <MudProgressCircular Indeterminate Color="Color.Warning" />
                    break;
            }
            <MudIconButton Icon="@Icons.Material.Filled.Brightness6" OnClick="@ToggleDark" />
            
            <MudIconButton Icon="@Icons.Material.Filled.Settings" OnClick="@ToggleSettings" />
        </MudStack>

        @if (showSettings)
        {
            <MudPaper Class="pa-3 mb-2" Elevation="2">
                <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                    <MudTextField @bind-Value="user.Name" @bind-Value:after="UpdateUser" Label="Username" Variant="Variant.Outlined" Style="width: 20rem;" />
                    
                    <MudSelect @bind-Value="user.ColorHex" @bind-Value:after="UpdateUser" Label="Color" Variant="Variant.Outlined" Style="@($"width: 10rem; background-color: {user.ColorHex}")">
                        @foreach (var hex in Statics.Palette)
                        {
                            <MudSelectItem Style="@($"background-color: {hex}")" Value="@hex">@string.Empty</MudSelectItem>
                        }
                    </MudSelect>

                    <MudSwitch T="bool" @bind-Value="disableLocalStorage" Color="Color.Secondary" Label="Disable local storage" @bind-Value:after="SaveLocalSettings" />
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="NewSession">New Session</MudButton>
                </MudStack>
            </MudPaper>
        }
        
        <MudPaper Class="pa-2 mb-2" Elevation="1">
            <MudStack Row Wrap="Wrap.Wrap" AlignItems="AlignItems.Center" Spacing="1">
                <MudText Typo="Typo.subtitle1">Online Users (@OnlineUsers.Count):</MudText>
                @foreach (var u in OnlineUsers.OrderBy(u => u.Name))
                {
                    <MudChip T="string" Size="Size.Small" Style="@GetUserChipStyle(u)">@u.Name</MudChip>
                }
            </MudStack>
        </MudPaper>

        <MudPaper Class="pa-2 mb-2" Elevation="1">
            <MudStack Row Wrap="Wrap.Wrap" AlignItems="AlignItems.Center" Spacing="1">
                <MudText Typo="Typo.subtitle1" @onclick="ClearOffline">Offline Users (@OfflineUsers.Count):</MudText>
                @foreach (var u in OfflineUsers.OrderBy(u => u.Name))
                {
                    <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined" Style="@GetUserChipStyle(u)">@u.Name</MudChip>
                }
            </MudStack>
        </MudPaper>
        
        <MudPaper Class="pa-2" Elevation="1" Style="min-height: 50vh; display:flex; flex-direction:column;">
            <MudStack Row Spacing="2" Class="mt-2">
                <MudTextField @bind-Value="message" Variant="Variant.Outlined" Placeholder="Type a message..." FullWidth
                              Immediate OnKeyDown="@(async e => { if (e.Key == "Enter") await SendMessage(); })" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SendMessage">Send</MudButton>
            </MudStack>
            
            @if (messages.Count == 0)
            {
                <MudText Class="pa-4" Color="Color.Secondary">No messages yet. Say hi!</MudText>
            }

            <MudStack Spacing="1">
                @foreach (var m in messages.OrderBy(x => x.TimeSent))
                {
                    <MudChat Variant="Variant.Filled" ChatPosition="@(m.SenderUserId == user.Id ? ChatBubblePosition.End : ChatBubblePosition.Start)">
                        <MudAvatar Style="@GetBubbleStyle(m)">@(GetSenderName(m).FirstOrDefault())</MudAvatar>
                        <MudChatBubble Color="Color.Default" Style="@GetBubbleStyle(m)">
                            @m.MessageText
                            <MudChatFooter Text="@m.TimeSent.ToShortTimeString()"/>
                        </MudChatBubble>
                    </MudChat>
                }
            </MudStack>

        </MudPaper>
    </MudStack>
</MudContainer>



@code {
   
    private bool showSettings = false;

    private HubConnection? hub;
    private string? message;
    private List<Message> messages = new();
    private List<User> users = new();
    List<User> OnlineUsers => users.Where(x => x.Online).ToList();
    List<User> OfflineUsers => users.Where(x => !x.Online).ToList();

[CascadingParameter] public Action ToggleDark { get; set; } = null!;


    User user = new();
    
    private bool disableLocalStorage = false;

    static class LocalStorageKeys
    {
        public const string User = "chat.user";
        public const string LocalStorageDisabled = "chat.disableStorage";
    }

    async Task Disconnect()
    {
        if (hub is null) return;
        await hub.StopAsync();
    }

    async Task Connect()
    {
        if (hub is null) return;
        await hub.StartAsync();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadLocalSettings();

        hub = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri(HubRoutes.ChatHub))
            .WithAutomaticReconnect()
            .Build();

        hub.On<Message>(nameof(IChatClient.ReceiveMessage), (msg) =>
        {
            msg.TimeReceived = DateTime.Now;
            messages.Add(msg);
            InvokeAsync(StateHasChanged);
        });

        hub.On<List<User>>(nameof(IChatClient.UsersUpdated), (list) =>
        {
            users = list ?? new();
            InvokeAsync(StateHasChanged);
        });

        hub.Closed += exception =>
        {
            StateHasChanged();
            return Task.CompletedTask;
        };

        hub.Reconnected += s =>
        {
            StateHasChanged();
            return Task.CompletedTask;
        };

        hub.Reconnecting += exception =>
        {
            StateHasChanged();
            return Task.CompletedTask;
        };

        await hub.StartAsync();
        await hub.InvokeAsync(nameof(IChatHub.Join), user);

        var current = await hub.InvokeAsync<List<User>>(nameof(IChatHub.GetUsers));
        users = current ?? new();
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(message))
        {
            var msg = new Message
            {
                MessageText = message,
                SenderUserId = user.Id,
                TimeSent = DateTime.Now
            };
            await hub!.InvokeAsync(nameof(IChatHub.SendMessage), msg);
            message = string.Empty;
            await SaveLocalSettings();
        }
    }

    private async Task ToggleSettings()
    {
        if (showSettings)
        {
            await SaveLocalSettings();
        }
        showSettings = !showSettings;
    }

    private string GetBubbleStyle(Message m)
    {
        var u = users.FirstOrDefault(x => x.Id == m.SenderUserId);
        var hex = u?.ColorHex ?? "#444";
        return $"background-color:{hex}; color:#fff;";
    }

    private string GetSenderName(Message m)
    {
        return users.FirstOrDefault(x => x.Id == m.SenderUserId)?.Name ?? "unknown";
    }

    private string GetUserChipStyle(User u)
    {
        return $"background-color:{u.ColorHex}; color:#fff; margin-right:4px;";
    }

    private async Task LoadLocalSettings()
    {
        try
        {
            disableLocalStorage = await LocalStorage.GetItemAsync<bool>(LocalStorageKeys.LocalStorageDisabled);

            if (!disableLocalStorage)
            {
                user = await LocalStorage.GetItemAsync<User>(LocalStorageKeys.User) ?? new();
            }
        }
        catch { /* ignore, localStorage might be blocked */ }
    }

    private async Task SaveLocalSettings()
    {
        try
        {
            await LocalStorage.SetItemAsync(LocalStorageKeys.LocalStorageDisabled, disableLocalStorage);
            if (disableLocalStorage)
                return;
            await LocalStorage.SetItemAsync(LocalStorageKeys.User, user);
        }
        catch { /* ignore */ }
    }
    
    private async Task NewSession()
    {
        user = new User();
        if (hub is null) return;
        await hub.StopAsync();
        await hub.StartAsync();
        await hub.InvokeAsync(nameof(IChatHub.Join), user);

    }
    
    private async Task UpdateUser()
    {
        await SaveLocalSettings();
        if (hub is not null && hub.State == HubConnectionState.Connected)
        {
            await hub.InvokeAsync(nameof(IChatHub.UpdateUser), user);
        }
    }

    private async Task ClearOffline()
    {
        if (hub is not null && hub.State == HubConnectionState.Connected)
        {
            await hub.InvokeAsync(nameof(IChatHub.ClearOfflineUsers));
        }
    }

}
